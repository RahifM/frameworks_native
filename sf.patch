commit f901b05e3cccf8962f232c741d0688252890b2e1
Author: RahifM <rahifmanjatha372@gmail.com>
Date:   Fri Aug 19 05:03:56 2022 +0000

    Revert "Fix build error"
    
    This reverts commit c073e131be79e27a630ddc3cd7e7fdd144f629d0.

diff --git a/services/surfaceflinger/Android.bp b/services/surfaceflinger/Android.bp
index 1a608097e7..bc2022abaa 100644
--- a/services/surfaceflinger/Android.bp
+++ b/services/surfaceflinger/Android.bp
@@ -132,7 +132,6 @@ filegroup {
         "SurfaceTracing.cpp",
         "TimeStats/TimeStats.cpp",
         "Transform.cpp",
-        "DisplayUtils.cpp",
     ],
 }
 
@@ -153,7 +152,6 @@ cc_library_shared {
     ],
     cppflags: [
         "-fwhole-program-vtables", // requires ThinLTO
-        "-Wno-unused-parameter",
     ],
     lto: {
         thin: true,
@@ -163,46 +161,6 @@ cc_library_shared {
             apply_msm8974_1440p_egl_workaround: {
                 cflags: ["-DALLOW_TOO_LARGE_DIMENSIONS"],
             },
-            uses_qcom_um_family: {
-                cflags: ["-DQCOM_UM_FAMILY"],
-                srcs: [
-                    "ExSurfaceFlinger/ExSurfaceFlinger.cpp",
-                    "ExSurfaceFlinger/ExVirtualDisplaySurface.cpp",
-                    "ExSurfaceFlinger/ExBufferLayer.cpp"
-                ],
-            },
-            uses_qcom_um_3_18_family: {
-                header_libs: [
-                    "//hardware/qcom/display-caf/msm8996:display_intf_headers",
-                ],
-                shared_libs: [
-                    "//hardware/qcom/display-caf/msm8996:libqdMetaData.system",
-                ],
-            },
-            uses_qcom_um_4_4_family: {
-                header_libs: [
-                    "//hardware/qcom/display-caf/msm8998:display_intf_headers",
-                ],
-                shared_libs: [
-                    "//hardware/qcom/display-caf/msm8998:libqdMetaData.system",
-                ],
-            },
-            uses_qcom_um_4_9_family: {
-                header_libs: [
-                    "//hardware/qcom/display-caf/sdm845:display_intf_headers",
-                ],
-                shared_libs: [
-                    "//hardware/qcom/display-caf/sdm845:libqdMetaData.system",
-                ],
-            },
-            uses_qcom_um_4_14_family: {
-                header_libs: [
-                    "//hardware/qcom/display-caf/sm8150:display_intf_headers",
-                ],
-                shared_libs: [
-                    "//hardware/qcom/display-caf/sm8150:libqdMetaData.system",
-                ],
-            },
         },
     },
 }
diff --git a/services/surfaceflinger/BufferLayer.cpp b/services/surfaceflinger/BufferLayer.cpp
index 56a2f60ac9..46408086d9 100644
--- a/services/surfaceflinger/BufferLayer.cpp
+++ b/services/surfaceflinger/BufferLayer.cpp
@@ -202,10 +202,6 @@ void BufferLayer::onDraw(const RenderArea& renderArea, const Region& clip,
 
     bool blackOutLayer = isProtected() || (isSecure() && !renderArea.isSecure());
 
-    if (!hasHdrDisplay()) {
-        blackOutLayer = blackOutLayer|| isHDRLayer();
-    }
-
     auto& engine(mFlinger->getRenderEngine());
 
     if (!blackOutLayer) {
diff --git a/services/surfaceflinger/BufferLayer.h b/services/surfaceflinger/BufferLayer.h
index 7d75deaf48..bf0ca69253 100644
--- a/services/surfaceflinger/BufferLayer.h
+++ b/services/surfaceflinger/BufferLayer.h
@@ -56,7 +56,6 @@ namespace android {
  */
 class BufferLayer : public Layer, public BufferLayerConsumer::ContentsChangedListener {
 public:
-    friend class ExBufferLayer;
     BufferLayer(SurfaceFlinger* flinger, const sp<Client>& client, const String8& name, uint32_t w,
                 uint32_t h, uint32_t flags);
 
@@ -135,10 +134,6 @@ public:
     void setPerFrameData(const sp<const DisplayDevice>& displayDevice) override;
 
     bool isOpaque(const Layer::State& s) const override;
-    virtual bool isHDRLayer() const { return false; }
-    virtual bool hasHdrDisplay() const { return false; }
-    virtual bool canAllowGPUForProtected() const { return false; }
-    virtual bool isScreenshot() const { return false; }
 
 private:
     void onFirstRef() override;
diff --git a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
index b67e53b5a9..9a2817dba1 100644
--- a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
+++ b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
@@ -169,7 +169,7 @@ status_t VirtualDisplaySurface::prepareFrame(CompositionType compositionType) {
         // format/usage and get a new buffer when the GLES driver calls
         // dequeueBuffer().
         mOutputFormat = mDefaultOutputFormat;
-        setOutputUsage(GRALLOC_USAGE_HW_COMPOSER);
+        mOutputUsage = GRALLOC_USAGE_HW_COMPOSER;
         refreshOutputBuffer();
     }
 
@@ -404,7 +404,7 @@ status_t VirtualDisplaySurface::dequeueBuffer(int* pslot, sp<Fence>* fence, uint
                     mSinkBufferWidth, mSinkBufferHeight,
                     buf->getPixelFormat(), buf->getUsage());
             mOutputFormat = format;
-            setOutputUsage(usage);
+            mOutputUsage = usage;
             result = refreshOutputBuffer();
             if (result < 0)
                 return result;
@@ -677,10 +677,6 @@ const char* VirtualDisplaySurface::dbgSourceStr(Source s) {
     }
 }
 
-void VirtualDisplaySurface::setOutputUsage(uint64_t flag) {
-    mOutputUsage = flag;
-}
-
 // ---------------------------------------------------------------------------
 } // namespace android
 // ---------------------------------------------------------------------------
diff --git a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.h b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.h
index 22bae3df03..5c8aceae92 100644
--- a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.h
+++ b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.h
@@ -73,8 +73,6 @@ class VirtualDisplaySurface : public DisplaySurface,
                               public BnGraphicBufferProducer,
                               private ConsumerBase {
 public:
-    friend class ExVirtualDisplaySurface;
-
     VirtualDisplaySurface(HWComposer& hwc, int32_t dispId,
             const sp<IGraphicBufferProducer>& sink,
             const sp<IGraphicBufferProducer>& bqProducer,
@@ -130,7 +128,6 @@ private:
             sp<Fence>* outFence, float outTransformMatrix[16]) override;
     virtual status_t getUniqueId(uint64_t* outId) const override;
     virtual status_t getConsumerUsage(uint64_t* outUsage) const override;
-    virtual void setOutputUsage(uint64_t flag);
 
     //
     // Utility methods
diff --git a/services/surfaceflinger/DisplayUtils.cpp b/services/surfaceflinger/DisplayUtils.cpp
deleted file mode 100644
index 45ac890d91..0000000000
--- a/services/surfaceflinger/DisplayUtils.cpp
+++ /dev/null
@@ -1,140 +0,0 @@
-/* Copyright (c) 2015, 2018, The Linux Foundation. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above
- *       copyright notice, this list of conditions and the following
- *       disclaimer in the documentation and/or other materials provided
- *       with the distribution.
- *     * Neither the name of The Linux Foundation nor the names of its
- *       contributors may be used to endorse or promote products derived
- *       from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
- * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include <stdlib.h>
-#include <stdint.h>
-#include <sys/types.h>
-
-#include <utils/Errors.h>
-#include <utils/Log.h>
-
-#include <ui/GraphicBuffer.h>
-
-#include <dlfcn.h>
-
-#include "DisplayUtils.h"
-
-#ifdef QCOM_UM_FAMILY
-#include <ExSurfaceFlinger/ExBufferLayer.h>
-#include <ExSurfaceFlinger/ExSurfaceFlinger.h>
-#include <ExSurfaceFlinger/ExVirtualDisplaySurface.h>
-#include <gralloc_priv.h>
-#endif
-
-namespace android {
-
-DisplayUtils* DisplayUtils::sDisplayUtils = NULL;
-bool DisplayUtils::sUseExtendedImpls = false;
-bool DisplayUtils::sDirectStreaming = false;
-
-DisplayUtils::DisplayUtils() {
-#ifdef QCOM_UM_FAMILY
-    char value[PROPERTY_VALUE_MAX] = {};
-    property_get("vendor.display.disable_qti_bsp", value, "0");
-    int disable_qti_bsp = atoi(value);
-    sUseExtendedImpls = !disable_qti_bsp;
-#endif
-}
-
-DisplayUtils* DisplayUtils::getInstance() {
-    if (sDisplayUtils == NULL) {
-        sDisplayUtils = new DisplayUtils();
-    }
-    return sDisplayUtils;
-}
-
-SurfaceFlinger* DisplayUtils::getSFInstance() {
-#ifdef QCOM_UM_FAMILY
-    if (sUseExtendedImpls) {
-        return new ExSurfaceFlinger();
-    }
-#endif
-    return new SurfaceFlinger();
-}
-
-BufferLayer* DisplayUtils::getBufferLayerInstance(SurfaceFlinger* flinger,
-                            const sp<Client>& client, const String8& name,
-                            uint32_t w, uint32_t h, uint32_t flags) {
-#ifdef QCOM_UM_FAMILY
-    if (sUseExtendedImpls) {
-        return new ExBufferLayer(flinger, client, name, w, h, flags);
-    }
-#endif
-    return new BufferLayer(flinger, client, name, w, h, flags);
-}
-
-void DisplayUtils::initVDSInstance(HWComposer & hwc, int32_t hwcDisplayId,
-        sp<IGraphicBufferProducer> currentStateSurface, sp<DisplaySurface> &dispSurface,
-        sp<IGraphicBufferProducer> &producer, sp<IGraphicBufferProducer> bqProducer,
-        sp<IGraphicBufferConsumer> bqConsumer, String8 currentStateDisplayName,
-        bool currentStateIsSecure)
-{
-    if (sUseExtendedImpls) {
-#ifdef QCOM_UM_FAMILY
-        VirtualDisplaySurface* vds = new ExVirtualDisplaySurface(hwc, hwcDisplayId,
-                currentStateSurface, bqProducer, bqConsumer, currentStateDisplayName,
-                currentStateIsSecure);
-        dispSurface = vds;
-        producer = vds;
-#endif
-    } else {
-        VirtualDisplaySurface* vds = new VirtualDisplaySurface(hwc, hwcDisplayId,
-                currentStateSurface, bqProducer, bqConsumer, currentStateDisplayName);
-        dispSurface = vds;
-        producer = vds;
-    }
-}
-
-bool DisplayUtils::canAllocateHwcDisplayIdForVDS(uint64_t usage) {
-    uint64_t flag_mask_pvt_wfd = ~0;
-    uint64_t flag_mask_hw_video = ~0;
-    char value[PROPERTY_VALUE_MAX] = {};
-    property_get("vendor.display.vds_allow_hwc", value, "0");
-    int allowHwcForVDS = atoi(value);
-
-#ifdef QCOM_UM_FAMILY
-    if (sUseExtendedImpls) {
-        // Reserve hardware acceleration for WFD use-case
-        // GRALLOC_USAGE_PRIVATE_WFD + GRALLOC_USAGE_HW_VIDEO_ENCODER = WFD using HW composer.
-        flag_mask_pvt_wfd = GRALLOC_USAGE_PRIVATE_WFD;
-        flag_mask_hw_video = GRALLOC_USAGE_HW_VIDEO_ENCODER;
-        // GRALLOC_USAGE_PRIVATE_WFD + GRALLOC_USAGE_SW_READ_OFTEN
-        // WFD using GLES (directstreaming).
-        sDirectStreaming = ((usage & GRALLOC_USAGE_PRIVATE_WFD) &&
-                            (usage & GRALLOC_USAGE_SW_READ_OFTEN));
-    }
-#endif
-
-    return (allowHwcForVDS || ((usage & flag_mask_pvt_wfd) &&
-            (usage & flag_mask_hw_video)));
-}
-
-bool DisplayUtils::skipColorLayer(const char* layerType) {
-    return (sDirectStreaming && !strncmp(layerType, "ColorLayer", strlen("ColorLayer")));
-}
-}; // namespace android
diff --git a/services/surfaceflinger/DisplayUtils.h b/services/surfaceflinger/DisplayUtils.h
deleted file mode 100644
index 06fb1006de..0000000000
--- a/services/surfaceflinger/DisplayUtils.h
+++ /dev/null
@@ -1,72 +0,0 @@
-/* Copyright (c) 2015, 2018, The Linux Foundation. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above
- *       copyright notice, this list of conditions and the following
- *       disclaimer in the documentation and/or other materials provided
- *       with the distribution.
- *     * Neither the name of The Linux Foundation nor the names of its
- *       contributors may be used to endorse or promote products derived
- *       from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
- * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef ANDROID_DISPLAY_UTILS_H
-#define ANDROID_DISPLAY_UTILS_H
-
-#include <stdint.h>
-#include <sys/types.h>
-#include <cutils/properties.h>
-
-#include "BufferLayer.h"
-#include "SurfaceFlinger.h"
-#include "DisplayHardware/VirtualDisplaySurface.h"
-// ---------------------------------------------------------------------------
-
-namespace android {
-
-class IGraphicBufferProducer;
-class IGraphicBufferConsumer;
-class DisplaySurface;
-
-/* Factory Classes */
-
-class DisplayUtils {
-  public:
-    static DisplayUtils* getInstance() ANDROID_API;
-    SurfaceFlinger* getSFInstance() ANDROID_API;
-    BufferLayer* getBufferLayerInstance(SurfaceFlinger*, const sp<Client>&,
-                        const String8&, uint32_t,
-                        uint32_t, uint32_t);
-    void initVDSInstance(HWComposer & hwc, int32_t hwcDisplayId,
-            sp<IGraphicBufferProducer> currentStateSurface, sp<DisplaySurface> &dispSurface,
-            sp<IGraphicBufferProducer> &producer, sp<IGraphicBufferProducer> bqProducer,
-            sp<IGraphicBufferConsumer> bqConsumer, String8 currentStateDisplayName,
-            bool currentStateIsSecure);
-    bool canAllocateHwcDisplayIdForVDS(uint64_t usage);
-    bool skipColorLayer(const char* layerType);
-    DisplayUtils();
-  private:
-    static DisplayUtils* sDisplayUtils;
-    static bool sUseExtendedImpls;
-    static bool sDirectStreaming;
-};
-
-}; // namespace android
-
-#endif // ANDROID_DISPLAY_UTILS_H
\ No newline at end of file
diff --git a/services/surfaceflinger/ExSurfaceFlinger/ExBufferLayer.cpp b/services/surfaceflinger/ExSurfaceFlinger/ExBufferLayer.cpp
deleted file mode 100644
index d94cf7a109..0000000000
--- a/services/surfaceflinger/ExSurfaceFlinger/ExBufferLayer.cpp
+++ /dev/null
@@ -1,123 +0,0 @@
-/* Copyright (c) 2015, 2018, The Linux Foundation. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above
- *       copyright notice, this list of conditions and the following
- *       disclaimer in the documentation and/or other materials provided
- *       with the distribution.
- *     * Neither the name of The Linux Foundation nor the names of its
- *       contributors may be used to endorse or promote products derived
- *       from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
- * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#define USE_COLOR_METADATA
-
-#include <stdlib.h>
-#include <stdint.h>
-#include <sys/types.h>
-
-#include <utils/Errors.h>
-#include <utils/Log.h>
-
-#include <ui/GraphicBuffer.h>
-#include <gralloc_priv.h>
-#include <qdMetaData.h>
-#include <color_metadata.h>
-
-#include "ExBufferLayer.h"
-
-#include <android/hardware/configstore/1.1/ISurfaceFlingerConfigs.h>
-#include <configstore/Utils.h>
-
-using android::hardware::configstore::getBool;
-using android::hardware::configstore::V1_0::ISurfaceFlingerConfigs;
-
-namespace android {
-
-ExBufferLayer::ExBufferLayer(SurfaceFlinger* flinger, const sp<Client>& client,
-                 const String8& name, uint32_t w, uint32_t h, uint32_t flags)
-    : BufferLayer(flinger, client, name, w, h, flags) {
-    char property[PROPERTY_VALUE_MAX] = {0};
-
-    mDebugLogs = false;
-    mIsGPUAllowedForProtected = false;
-    if ((property_get("vendor.display.qdframework_logs", property, NULL) > 0) &&
-        (!strncmp(property, "1", PROPERTY_VALUE_MAX ) ||
-         (!strncasecmp(property,"true", PROPERTY_VALUE_MAX )))) {
-        mDebugLogs = true;
-    }
-
-    ALOGD_IF(isDebug(),"Creating custom Layer %s",__FUNCTION__);
-
-    if ((property_get("vendor.gralloc.cp_level3", property, NULL) > 0) &&
-           (atoi(property) == 1)) {
-        mIsGPUAllowedForProtected = true;
-    }
-
-    mScreenshot = (std::string(name).find("ScreenshotSurface") != std::string::npos);
-    const sp<const DisplayDevice> hw(mFlinger->getDefaultDisplayDevice());
-    mHasHDRCapabilities = hw->hasHDR10Support() ||
-                          hw->hasHLGSupport()   ||
-                          hw->hasDolbyVisionSupport();
-
-}
-
-ExBufferLayer::~ExBufferLayer() {
-}
-
-bool ExBufferLayer::hasHdrDisplay() const {
-    return getBool<ISurfaceFlingerConfigs, &ISurfaceFlingerConfigs::hasHDRDisplay>(false);
-}
-
-bool ExBufferLayer::isHDRLayer() const {
-    const sp<GraphicBuffer>& activeBuffer(mActiveBuffer);
-    if (!activeBuffer)
-        return false;
-
-    ANativeWindowBuffer* buffer = activeBuffer->getNativeBuffer();
-    if (!buffer)
-        return false;
-
-    const private_handle_t* hnd = static_cast<private_handle_t*>
-            (const_cast<native_handle_t*>(buffer->handle));
-    if (!hnd)
-        return false;
-
-    ColorMetaData colorData;
-    if (getMetaData(const_cast<private_handle_t *>(hnd), GET_COLOR_METADATA, &colorData) == 0) {
-        if (colorData.colorPrimaries == ColorPrimaries_BT2020 &&
-            (colorData.transfer == Transfer_SMPTE_ST2084 ||
-            colorData.transfer == Transfer_HLG)) {
-                return (!ExSurfaceFlinger::AllowHDRFallBack() &&
-                        !mFlinger->IsHWCDisabled() &&  mHasHDRCapabilities);
-        }
-    }
-
-    return false;
-}
-
-bool ExBufferLayer::canAllowGPUForProtected() const {
-    if (isProtected()) {
-        return mIsGPUAllowedForProtected;
-    } else {
-        return false;
-    }
-}
-
-}; // namespace android
\ No newline at end of file
diff --git a/services/surfaceflinger/ExSurfaceFlinger/ExBufferLayer.h b/services/surfaceflinger/ExSurfaceFlinger/ExBufferLayer.h
deleted file mode 100644
index f410e5cde8..0000000000
--- a/services/surfaceflinger/ExSurfaceFlinger/ExBufferLayer.h
+++ /dev/null
@@ -1,64 +0,0 @@
-/* Copyright (c) 2015, 2018, The Linux Foundation. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above
- *       copyright notice, this list of conditions and the following
- *       disclaimer in the documentation and/or other materials provided
- *       with the distribution.
- *     * Neither the name of The Linux Foundation nor the names of its
- *       contributors may be used to endorse or promote products derived
- *       from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
- * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef ANDROID_EX_LAYER_H
-#define ANDROID_EX_LAYER_H
-
-#include <stdint.h>
-#include <sys/types.h>
-#include <cutils/properties.h>
-
-#include <BufferLayer.h>
-#include "ExSurfaceFlinger.h"
-
-namespace android {
-
-class ExSurfaceFlinger;
-
-class ExBufferLayer : public BufferLayer
-{
-public:
-    ExBufferLayer(SurfaceFlinger* flinger, const sp<Client>& client,
-            const String8& name, uint32_t w, uint32_t h, uint32_t flags);
-    virtual ~ExBufferLayer();
-
-    virtual bool isHDRLayer() const;
-    virtual bool hasHdrDisplay() const;
-    virtual bool isScreenshot() const { return mScreenshot; }
-    virtual bool canAllowGPUForProtected() const;
-protected:
-    bool mDebugLogs;
-    bool isDebug() { return mDebugLogs; }
-    bool mIsGPUAllowedForProtected;
-    bool mScreenshot;
-    bool mHasHDRCapabilities;
-};
-
-}; // namespace android
-
-#endif // ANDROID_EX_LAYER_H
\ No newline at end of file
diff --git a/services/surfaceflinger/ExSurfaceFlinger/ExSurfaceFlinger.cpp b/services/surfaceflinger/ExSurfaceFlinger/ExSurfaceFlinger.cpp
deleted file mode 100644
index f2e0b4c313..0000000000
--- a/services/surfaceflinger/ExSurfaceFlinger/ExSurfaceFlinger.cpp
+++ /dev/null
@@ -1,98 +0,0 @@
-/* Copyright (c) 2015, 2018, The Linux Foundation. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above
- *       copyright notice, this list of conditions and the following
- *       disclaimer in the documentation and/or other materials provided
- *       with the distribution.
- *     * Neither the name of The Linux Foundation nor the names of its
- *       contributors may be used to endorse or promote products derived
- *       from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
- * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#define ATRACE_TAG ATRACE_TAG_GRAPHICS
-
-#include "ExSurfaceFlinger.h"
-#include <fstream>
-#include <cutils/properties.h>
-#include <ui/GraphicBufferAllocator.h>
-
-namespace android {
-
-bool ExSurfaceFlinger::sAllowHDRFallBack = false;
-
-ExSurfaceFlinger::ExSurfaceFlinger() {
-    char property[PROPERTY_VALUE_MAX] = {0};
-
-    mDebugLogs = false;
-    if ((property_get("vendor.display.qdframework_logs", property, NULL) > 0) &&
-        (!strncmp(property, "1", PROPERTY_VALUE_MAX ) ||
-         (!strncasecmp(property,"true", PROPERTY_VALUE_MAX )))) {
-        mDebugLogs = true;
-    }
-
-    ALOGD_IF(isDebug(),"Creating custom SurfaceFlinger %s",__FUNCTION__);
-
-    mDisableExtAnimation = false;
-    if ((property_get("vendor.display.disable_ext_animation", property, "0") > 0) &&
-        (!strncmp(property, "1", PROPERTY_VALUE_MAX ) ||
-         (!strncasecmp(property,"true", PROPERTY_VALUE_MAX )))) {
-        mDisableExtAnimation = true;
-    }
-
-    ALOGD_IF(isDebug(),"Animation on external is %s in %s",
-             mDisableExtAnimation ? "disabled" : "not disabled", __FUNCTION__);
-
-    if((property_get("vendor.display.hwc_disable_hdr", property, "0") > 0) &&
-       (!strncmp(property, "1", PROPERTY_VALUE_MAX ) ||
-        (!strncasecmp(property,"true", PROPERTY_VALUE_MAX )))) {
-       sAllowHDRFallBack = true;
-    }
-}
-
-ExSurfaceFlinger::~ExSurfaceFlinger() { }
-
-void ExSurfaceFlinger::handleDPTransactionIfNeeded(
-        const Vector<DisplayState>& displays) {
-    /* Wait for one draw cycle before setting display projection only when the disable
-     * external rotation animation feature is enabled
-     */
-    if (mDisableExtAnimation) {
-        size_t count = displays.size();
-        for (size_t i=0 ; i<count ; i++) {
-            const DisplayState& s(displays[i]);
-            if (getDisplayType(s.token) != DisplayDevice::DISPLAY_PRIMARY) {
-                const uint32_t what = s.what;
-                /* Invalidate and wait on eDisplayProjectionChanged to trigger a draw cycle so that
-                 * it can fix one incorrect frame on the External, when we
-                 * disable external animation
-                 */
-                if (what & DisplayState::eDisplayProjectionChanged) {
-                    Mutex::Autolock lock(mExtAnimationLock);
-                    invalidateHwcGeometry();
-                    android_atomic_or(1, &mRepaintEverything);
-                    signalRefresh();
-                    mExtAnimationCond.waitRelative(mExtAnimationLock, 1000000000);
-                }
-            }
-        }
-    }
-}
-
-}; // namespace android
diff --git a/services/surfaceflinger/ExSurfaceFlinger/ExSurfaceFlinger.h b/services/surfaceflinger/ExSurfaceFlinger/ExSurfaceFlinger.h
deleted file mode 100644
index 36c5b1736c..0000000000
--- a/services/surfaceflinger/ExSurfaceFlinger/ExSurfaceFlinger.h
+++ /dev/null
@@ -1,62 +0,0 @@
-/* Copyright (c) 2015, 2018, The Linux Foundation. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above
- *       copyright notice, this list of conditions and the following
- *       disclaimer in the documentation and/or other materials provided
- *       with the distribution.
- *     * Neither the name of The Linux Foundation nor the names of its
- *       contributors may be used to endorse or promote products derived
- *       from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
- * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef ANDROID_EX_SURFACE_FLINGER_H
-#define ANDROID_EX_SURFACE_FLINGER_H
-
-#include "SurfaceFlinger.h"
-#include "Layer.h"
-
-namespace android {
-
-class ExSurfaceFlinger : public SurfaceFlinger
-{
-public:
-    ExSurfaceFlinger();
-
-protected:
-    friend class ExBufferLayer;
-    friend class Layer;
-    virtual void handleDPTransactionIfNeeded(
-                     const Vector<DisplayState>& displays);
-    virtual bool IsHWCDisabled() { return mDebugDisableHWC; }
-    virtual ~ExSurfaceFlinger();
-
-    bool mDebugLogs;
-    bool isDebug() { return mDebugLogs; }
-    bool mDisableExtAnimation;
-
-    static bool sAllowHDRFallBack;
-    static bool AllowHDRFallBack() { return sAllowHDRFallBack; }
-    Mutex mExtAnimationLock;
-    Condition mExtAnimationCond;
-};
-
-}; //namespace android
-
-#endif //ANDROID_EX_SURFACE_FLINGER_H
\ No newline at end of file
diff --git a/services/surfaceflinger/ExSurfaceFlinger/ExVirtualDisplaySurface.cpp b/services/surfaceflinger/ExSurfaceFlinger/ExVirtualDisplaySurface.cpp
deleted file mode 100644
index 97d8470922..0000000000
--- a/services/surfaceflinger/ExSurfaceFlinger/ExVirtualDisplaySurface.cpp
+++ /dev/null
@@ -1,102 +0,0 @@
-/* Copyright (c) 2015, 2018, The Linux Foundation. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above
- *       copyright notice, this list of conditions and the following
- *       disclaimer in the documentation and/or other materials provided
- *       with the distribution.
- *     * Neither the name of The Linux Foundation nor the names of its
- *       contributors may be used to endorse or promote products derived
- *       from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
- * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include "ExVirtualDisplaySurface.h"
-#include <system/window.h>
-#include <gralloc_priv.h>
-
-namespace android {
-
-#define VDS_LOGE(msg, ...) ALOGE("[%s] " msg, \
-        mDisplayName.string(), ##__VA_ARGS__)
-#define VDS_LOGW_IF(cond, msg, ...) ALOGW_IF(cond, "[%s] " msg, \
-        mDisplayName.string(), ##__VA_ARGS__)
-#define VDS_LOGV(msg, ...) ALOGV("[%s] " msg, \
-        mDisplayName.string(), ##__VA_ARGS__)
-
-ExVirtualDisplaySurface::ExVirtualDisplaySurface(HWComposer& hwc, int32_t dispId,
-        const sp<IGraphicBufferProducer>& sink,
-        const sp<IGraphicBufferProducer>& bqProducer,
-        const sp<IGraphicBufferConsumer>& bqConsumer,
-        const String8& name,
-        bool secure)
-:   VirtualDisplaySurface(hwc, dispId, sink, bqProducer, bqConsumer, name),
-   mSecure(secure) {
-   sink->getConsumerUsage(&mSinkUsage);
-   mSinkUsage |= GRALLOC_USAGE_HW_COMPOSER;
-   setOutputUsage(mSinkUsage);
-
-    if (HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED == mOutputFormat) {
-        uint64_t sinkUsage = (mSinkUsage & GRALLOC_USAGE_HW_VIDEO_ENCODER);
-        sinkUsage |= (mSinkUsage & GRALLOC_USAGE_PRIVATE_WFD);
-
-        if (!sinkUsage) {
-            // Preserve original layer format
-            int sinkFormat;
-            sink->query(NATIVE_WINDOW_FORMAT, &sinkFormat);
-            mDefaultOutputFormat = sinkFormat;
-            mOutputFormat = mDefaultOutputFormat;
-        }
-    }
-}
-
-status_t ExVirtualDisplaySurface::beginFrame(bool mustRecompose) {
-    if (mDisplayId < 0)
-        return NO_ERROR;
-
-    mMustRecompose = mustRecompose;
-    /* For WFD use cases we must always set the recompose flag in order
-     * to support pause/resume functionality
-     */
-    if (mOutputUsage & GRALLOC_USAGE_HW_VIDEO_ENCODER) {
-        mMustRecompose = true;
-    }
-
-    VDS_LOGW_IF(mDbgState != DBG_STATE_IDLE,
-            "Unexpected beginFrame() in %s state", dbgStateStr());
-    mDbgState = DBG_STATE_BEGUN;
-
-    return refreshOutputBuffer();
-}
-
-/* Helper to update the output usage when the display is secure */
-void ExVirtualDisplaySurface::setOutputUsage(uint64_t /*flag*/) {
-    mOutputUsage = mSinkUsage;
-    if (mSecure && (mOutputUsage & GRALLOC_USAGE_HW_VIDEO_ENCODER)) {
-        /* TODO: Currently, the framework can only say whether the display
-         * and its subsequent session are secure or not. However, there is
-         * no mechanism to distinguish the different levels of security.
-         * The current solution assumes WV L3 protection.
-         */
-        mOutputUsage |= GRALLOC_USAGE_PROTECTED |
-                        GRALLOC_USAGE_PRIVATE_MM_HEAP |
-                        GRALLOC_USAGE_PRIVATE_UNCACHED;
-    }
-}
-
-}; // namespace android
\ No newline at end of file
diff --git a/services/surfaceflinger/ExSurfaceFlinger/ExVirtualDisplaySurface.h b/services/surfaceflinger/ExSurfaceFlinger/ExVirtualDisplaySurface.h
deleted file mode 100644
index e8e11afc12..0000000000
--- a/services/surfaceflinger/ExSurfaceFlinger/ExVirtualDisplaySurface.h
+++ /dev/null
@@ -1,54 +0,0 @@
-/* Copyright (c) 2015, 2018, The Linux Foundation. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above
- *       copyright notice, this list of conditions and the following
- *       disclaimer in the documentation and/or other materials provided
- *       with the distribution.
- *     * Neither the name of The Linux Foundation nor the names of its
- *       contributors may be used to endorse or promote products derived
- *       from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
- * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef ANDROID_EX_VIRTUAL_DISPLAY_SURFACE_H
-#define ANDROID_EX_VIRTUAL_DISPLAY_SURFACE_H
-
-#include <DisplayHardware/VirtualDisplaySurface.h>
-
-namespace android {
-
-class ExVirtualDisplaySurface : public VirtualDisplaySurface {
-public:
-    ExVirtualDisplaySurface(HWComposer& hwc, int32_t dispId,
-            const sp<IGraphicBufferProducer>& sink,
-            const sp<IGraphicBufferProducer>& bqProducer,
-            const sp<IGraphicBufferConsumer>& bqConsumer,
-            const String8& name,
-            bool secure);
-
-private:
-    virtual status_t beginFrame(bool mustRecompose);
-    virtual void setOutputUsage(uint64_t flag);
-    bool mSecure;
-    uint64_t mSinkUsage;
-};
-
-}; // namespace android
-
-#endif // ANDROID_EX_VIRTUAL_DISPLAY_SURFACE_H
diff --git a/services/surfaceflinger/Layer.h b/services/surfaceflinger/Layer.h
index ebd5f2889a..e1b2d8872f 100644
--- a/services/surfaceflinger/Layer.h
+++ b/services/surfaceflinger/Layer.h
@@ -428,8 +428,6 @@ public:
     virtual void releasePendingBuffer(nsecs_t /*dequeueReadyTime*/) { }
 
 
-    virtual bool isScreenshot() const { return false; }
-
     /*
      * draw - performs some global clipping optimizations
      * and calls onDraw().
diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index f513b9fd7f..8f4701ca51 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -79,7 +79,6 @@
 #include "Transform.h"
 #include "clz.h"
 
-#include "DisplayUtils.h"
 #include "DisplayHardware/ComposerHal.h"
 #include "DisplayHardware/FramebufferSurface.h"
 #include "DisplayHardware/HWComposer.h"
@@ -2538,7 +2537,6 @@ void SurfaceFlinger::processDisplayChangesLocked() {
                     if (state.surface != nullptr) {
                         // Allow VR composer to use virtual displays.
                         if (mUseHwcVirtualDisplays || getBE().mHwc->isUsingVrComposer()) {
-                            DisplayUtils *displayUtils = DisplayUtils::getInstance();
                             int width = 0;
                             int status = state.surface->query(NATIVE_WINDOW_WIDTH, &width);
                             ALOGE_IF(status != NO_ERROR, "Unable to query width (%d)", status);
@@ -2550,27 +2548,18 @@ void SurfaceFlinger::processDisplayChangesLocked() {
                             ALOGE_IF(status != NO_ERROR, "Unable to query format (%d)", status);
                             auto format = static_cast<ui::PixelFormat>(intFormat);
 
-                            if (maxVirtualDisplaySize == 0 ||
-                                 ( (uint64_t)width <= maxVirtualDisplaySize &&
-                                 (uint64_t)height <= maxVirtualDisplaySize)) {
-                                uint64_t usage = 0;
-                                // Replace with native_window_get_consumer_usage ?
-                                status = state.surface->getConsumerUsage(&usage);
-                                ALOGW_IF(status != NO_ERROR, "Unable to query usage (%d)", status);
-                                if ( (status == NO_ERROR) &&
-                                     displayUtils->canAllocateHwcDisplayIdForVDS(usage)) {
-                                    getBE().mHwc->allocateVirtualDisplay(
-                                            width, height, &format, &hwcId);
-                                 }
-                            }
+                            getBE().mHwc->allocateVirtualDisplay(width, height, &format, &hwcId);
                         }
 
                         // TODO: Plumb requested format back up to consumer
-                        DisplayUtils::getInstance()->initVDSInstance(*getBE().mHwc,
-                                                        hwcId, state.surface,
-                                                        dispSurface, producer,
-                                                        bqProducer, bqConsumer,
-                                                        state.displayName, state.isSecure);
+
+                        sp<VirtualDisplaySurface> vds =
+                                new VirtualDisplaySurface(*getBE().mHwc, hwcId, state.surface,
+                                                          bqProducer, bqConsumer,
+                                                          state.displayName);
+
+                        dispSurface = vds;
+                        producer = vds;
                     }
                 } else {
                     ALOGE_IF(state.surface != nullptr,
@@ -3133,12 +3122,6 @@ bool SurfaceFlinger::doComposeSurfaces(const sp<const DisplayDevice>& displayDev
                     break;
                 }
                 case HWC2::Composition::Client: {
-                    if ((hwcId < 0) &&
-                        (DisplayUtils::getInstance()->skipColorLayer(layer->getTypeId()))) {
-                        // We are not using h/w composer.
-                        // Skip color (dim) layer for WFD direct streaming.
-                        continue;
-                    }
                     layer->draw(renderArea, clip);
                     break;
                 }
@@ -3785,8 +3768,7 @@ status_t SurfaceFlinger::createBufferLayer(const sp<Client>& client,
         break;
     }
 
-    sp<BufferLayer> layer = DisplayUtils::getInstance()->getBufferLayerInstance(
-                            this, client, name, w, h, flags);
+    sp<BufferLayer> layer = new BufferLayer(this, client, name, w, h, flags);
     status_t err = layer->setBuffers(w, h, format, flags);
     if (err == NO_ERROR) {
         *handle = layer->getHandle();
diff --git a/services/surfaceflinger/SurfaceFlinger.h b/services/surfaceflinger/SurfaceFlinger.h
index 58099c593f..7753685ab9 100644
--- a/services/surfaceflinger/SurfaceFlinger.h
+++ b/services/surfaceflinger/SurfaceFlinger.h
@@ -285,7 +285,6 @@ public:
     // This also allows devices with wide-color displays that don't
     // want to support color management to disable color management.
     static bool hasWideColorDisplay;
-    friend class ExSurfaceFlinger;
 
     static int primaryDisplayOrientation;
 
@@ -327,8 +326,6 @@ public:
     // synchronous message to the main thread to obtain one on the fly
     uint32_t getNewTexture();
 
-    virtual bool IsHWCDisabled() { return false; }
-
     // utility function to delete a texture on the main thread
     void deleteTextureAsync(uint32_t texture);
 
@@ -477,12 +474,6 @@ private:
                            HWC2::Connection connection) override;
     void onRefreshReceived(int32_t sequenceId, hwc2_display_t display) override;
 
-    /* ------------------------------------------------------------------------
-     * Extensions
-     */
-    virtual void handleDPTransactionIfNeeded(
-                     const Vector<DisplayState>& /*displays*/) { }
-
     /* ------------------------------------------------------------------------
      * Message handling
      */
diff --git a/services/surfaceflinger/main_surfaceflinger.cpp b/services/surfaceflinger/main_surfaceflinger.cpp
index b2bb92dd0c..b1ff522de6 100644
--- a/services/surfaceflinger/main_surfaceflinger.cpp
+++ b/services/surfaceflinger/main_surfaceflinger.cpp
@@ -31,7 +31,6 @@
 #include <configstore/Utils.h>
 #include "GpuService.h"
 #include "SurfaceFlinger.h"
-#include "DisplayUtils.h"
 
 using namespace android;
 
@@ -86,7 +85,7 @@ int main(int, char**) {
     ps->startThreadPool();
 
     // instantiate surfaceflinger
-    sp<SurfaceFlinger> flinger = DisplayUtils::getInstance()->getSFInstance();
+    sp<SurfaceFlinger> flinger = new SurfaceFlinger();
 
     setpriority(PRIO_PROCESS, 0, PRIORITY_URGENT_DISPLAY);
 
